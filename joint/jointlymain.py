
import os
import numpy as np
from skimage.io import imread
from skimage.transform import resize
import glob
import tensorflow as tf
import sys
import pickle
import random
import self
from joint.net import Network
from random import shuffle

import matplotlib
matplotlib.use('pdf')
import matplotlib.pyplot as plt
from shutil import copyfile

# ================================================
def train_model():
    # ==================================================== train

    train_path_T1 = '/exports/lkeb-hpc/gkarami/Data/2_Train_T1/'
    train_path_MD = '/exports/lkeb-hpc/gkarami/Data/2_Train_MD/'
    train_path_CBV = '/exports/lkeb-hpc/gkarami/Data/2_Train_CBV/'
    train_path_mask = '/exports/lkeb-hpc/gkarami/Data/2_Train_T1/'

    train_dataset_T1_1= sorted(next(os.walk(train_path_T1))[2])
    train_dataset_MD_1 = sorted(next(os.walk(train_path_MD))[2])
    train_dataset_CBV_1= sorted(next(os.walk(train_path_CBV))[2])


    train_dataset_T1 = np.zeros((len(train_dataset_T1_1), 128, 128), dtype=np.float)
    train_dataset_MD = np.zeros((len(train_dataset_MD_1), 128, 128), dtype=np.float)
    train_dataset_CBV = np.zeros((len(train_dataset_CBV_1), 128, 128), dtype=np.float)

    Resized_Train_T1 = np.zeros((len(train_dataset_T1_1), 64, 64), dtype=np.float)
    Resized_Train_MD = np.zeros((len(train_dataset_MD_1), 64, 64), dtype=np.float)
    Resized_Train_CBV = np.zeros((len(train_dataset_CBV_1), 64, 64), dtype=np.float)
    Resized_Train_Masks = np.zeros((len(train_dataset_T1_1), 64, 64, 1), dtype=np.bool)


    # =========================T1 train
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(train_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(train_path_T1, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)

        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Train_T1[n] = resize(cropped_image[:, :],
                                  (64, 64),
                                  mode='constant',
                                  anti_aliasing=True,
                                  preserve_range=True)

        Resized_Train_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                       (64, 64),
                                                       mode='constant',
                                                       anti_aliasing=True,
                                                       preserve_range=True), axis=-1)

        train_dataset_T1[n] = image
        n += 1

    Rot_90_Train_T1 = np.zeros((len(train_dataset_T1_1), 64, 64), dtype=np.float)
    Rot_lr_Train_T1 = np.zeros((len(train_dataset_T1_1), 64, 64), dtype=np.float)
    Rot_ud_Train_T1 = np.zeros((len(train_dataset_T1_1), 64, 64), dtype=np.float)
    for m in range(len(train_dataset_T1_1)):
        img = Resized_Train_T1[m]
        Rot_90_Train_T1[m] = np.rot90(img)
        Rot_lr_Train_T1[m] = np.fliplr(img)
        Rot_ud_Train_T1[m] = np.flipud(img)


    # ===================================================================== CBV  Train
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(train_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(train_path_CBV, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Train_CBV[n] = resize(cropped_image[:, :],
                                      (64, 64),
                                      mode='constant',
                                      anti_aliasing=True,
                                      preserve_range=True)

        Resized_Train_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                       (64, 64),
                                                       mode='constant',
                                                       anti_aliasing=True,
                                                       preserve_range=True), axis=-1)

        train_dataset_CBV[n] = image
        n += 1

    Rot_90_Train_CBV = np.zeros((len(train_dataset_CBV_1), 64, 64), dtype=np.float)
    Rot_lr_Train_CBV = np.zeros((len(train_dataset_CBV_1), 64, 64), dtype=np.float)
    Rot_ud_Train_CBV = np.zeros((len(train_dataset_CBV_1), 64, 64), dtype=np.float)
    for m in range(len(train_dataset_CBV_1)):
        img = Resized_Train_CBV[m]
        Rot_90_Train_CBV[m] = np.rot90(img)
        Rot_lr_Train_CBV[m] = np.fliplr(img)
        Rot_ud_Train_CBV[m] = np.flipud(img)
    # ============================================================ MD  Train
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(train_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(train_path_MD, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Train_MD[n] = resize(cropped_image[:, :],
                                     (64, 64),
                                     mode='constant',
                                     anti_aliasing=True,
                                     preserve_range=True)

        Resized_Train_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                       (64, 64),
                                                       mode='constant',
                                                       anti_aliasing=True,
                                                       preserve_range=True), axis=-1)

        train_dataset_MD[n] = image
        n += 1

    Rot_90_Train_MD = np.zeros((len(train_dataset_MD_1), 64, 64), dtype=np.float)
    Rot_lr_Train_MD = np.zeros((len(train_dataset_MD_1), 64, 64), dtype=np.float)
    Rot_ud_Train_MD = np.zeros((len(train_dataset_MD_1), 64, 64), dtype=np.float)
    for m in range(len(train_dataset_MD_1)):
        img = Resized_Train_MD[m]
        Rot_90_Train_MD[m] = np.rot90(img)
        Rot_lr_Train_MD[m] = np.fliplr(img)
        Rot_ud_Train_MD[m] = np.flipud(img)

    # =========================================onehot encoding(cd:Data/2_Train_T1)
    train_survival_labels = np.mat((
                                       "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
                                       "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
                                       "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
                                       "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2 "),
                                   dtype=float)
    train_grad_labels = np.mat((
                                          " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
                                          " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
                                          " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
                                          " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0"),
                                    dtype=float)
    # ===================================Data/2_train_copy
    # train_survival_labels = np.mat((   "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    2; 2; 2; 2; 2; 2; 2; 2; 2;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       2; 2; 2;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0;       1; 1; 1; 1; "
    #                                    "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    2; 2; 2; 2; 2; 2; 2; 2; 2;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       2; 2; 2;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0;       1; 1; 1; 1;  "
    #                                    "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    2; 2; 2; 2; 2; 2; 2; 2; 2;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       2; 2; 2;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0;       1; 1; 1; 1; "
    #                                    "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    2; 2; 2; 2; 2; 2; 2; 2; 2;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       2; 2; 2;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0;       1; 1; 1; 1"),
    #                                     dtype = float)
    #
    # train_grad_labels = np.mat((       "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1;       1; 1; 1; 1;"
    #                                    "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1;       1; 1; 1; 1;"
    #                                    "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1;       1; 1; 1; 1;"
    #                                    "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;    1; 1; 1; 1; 1; 1; 1; 1; 1;      1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1;       1; 1; 1; 1"),
    #                                     dtype=float)
    print(train_dataset_T1_1)
    #========================

    # train_survival_labels = np.mat((   " 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2"), dtype=float)
    # train_grad_labels = np.mat((" 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0"), dtype=float)

    # train_survival_labels = np.mat((
        #                                    " 0; 0; 0; 0; 1; 1; 1; 2; 2; 2; 1; 1; 1; 2; 2; 0; 0; 0; 2; 2; 2; 1; 1; 1; 0; 0; 0; 0; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 0; 0; 0; 2; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; "
        #                                    " 0; 0; 0; 0; 1; 1; 1; 2; 2; 2; 1; 1; 1; 2; 2; 0; 0; 0; 2; 2; 2; 1; 1; 1; 0; 0; 0; 0; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 0; 0; 0; 2; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; "
        #                                    " 0; 0; 0; 0; 1; 1; 1; 2; 2; 2; 1; 1; 1; 2; 2; 0; 0; 0; 2; 2; 2; 1; 1; 1; 0; 0; 0; 0; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 0; 0; 0; 2; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; "
        #                                    " 0; 0; 0; 0; 1; 1; 1; 2; 2; 2; 1; 1; 1; 2; 2; 0; 0; 0; 2; 2; 2; 1; 1; 1; 0; 0; 0; 0; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 0; 0; 0; 2; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2 "),
        #                                dtype=float)
    # train_grad_labels = np.mat((
        #                                  " 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0; 0; 1; 0; 0; 0; 0; 0;"
        #                                  " 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0; 0; 1; 0; 0; 0; 0; 0;"
        #                                  " 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0; 0; 1; 0; 0; 0; 0; 0;"
        #                                  " 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0; 0; 1; 0; 0; 0; 0; 0"),
        #                              dtype=float)


    # ==============================================  cd: Data/3_train_T1_hg
    # TRAIN: 04(23), 6(11), 8(15), 10(15), 12(5), 13(10), 14(10), 15(15), 17(15), 18(18), 22(15), 23(21), 24(14), 25(30), 26(20), 27(15), 28(6), 30(8), 31(25), 33(6), 34(15), 35(5), 38(15), 40(5), 48(7)
    # train_survival_labels = np.mat((
    #                                    "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1;           2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0;  "
    #                                    "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1;           2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0;  "
    #                                    "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1;           2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0;  "
    #                                    "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;         2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1;           2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;           1; 1; 1; 1; 1;            2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;            1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0  "),
    #                                 dtype=float)
    #
    # train_grad_labels = np.mat((       "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;           1; 1; 1; 1; 1;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1;     1; 1; 1; 1; 1; 1; 1;  "
    #                                    "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;           1; 1; 1; 1; 1;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1;     1; 1; 1; 1; 1; 1; 1;  "
    #                                    "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;           1; 1; 1; 1; 1;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1;     1; 1; 1; 1; 1; 1; 1;  "
    #                                    "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;          0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;          1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1;             1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0;           1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;           1; 1; 1; 1; 1;            0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;            1; 1; 1; 1; 1;     1; 1; 1; 1; 1; 1; 1 "),
    #                                  dtype=float)
    #
    # #===============================

    # train_survival_labels = np.mat(( "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
    #                                  "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
    #                                   "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
    #                                  "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2 "),
    #                                   dtype=float)
    #
    # train_grad_labels = np.mat(( " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                                 " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                                 " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                                 " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0;0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0"),
    #                                  dtype=float)
    # # #################################
    train_survival_labels_cat = (tf.keras.utils.to_categorical(train_survival_labels))
    train_grad_labels_cat = (tf.keras.utils.to_categorical(train_grad_labels))
    # ==================================================================================

    Concat_Train_T1 = np.concatenate((Resized_Train_T1, Rot_90_Train_T1, Rot_lr_Train_T1, Rot_ud_Train_T1), axis=0)
    Concat_Train_MD = np.concatenate((Resized_Train_MD, Rot_90_Train_MD, Rot_lr_Train_MD, Rot_ud_Train_MD), axis=0)
    Concat_Train_CBV = np.concatenate((Resized_Train_CBV, Rot_90_Train_CBV, Rot_lr_Train_CBV, Rot_ud_Train_CBV), axis=0)

    # max_T1 = Concat_Train_T1.max()
    # max_MD = Concat_Train_MD.max()
    # max_CBV = Concat_Train_CBV.max()
    #
    # Concat_Train_T1_norm = Concat_Train_T1.astype('float32') / max_T1
    # Concat_Train_MD_nrom = Concat_Train_MD.astype('float32') / max_MD
    # Concat_Train_CBV_norm = Concat_Train_CBV.astype('float32') / max_CBV

    # print(train_dataset_MD_1)
    #========================================== shuffle data
    def shuffle_lists(t1, md, cbv, y_survival_cat, y_grad_cat):
        index_shuf = list(range(1400))
        shuffle(index_shuf)
        t1_sn = np.hstack([t1[sn]]
                          for sn in index_shuf)
        md_sn = np.hstack([md[sn]]
                          for sn in index_shuf)
        cbv_sn = np.hstack([cbv[sn]]
                          for sn in index_shuf)
        y_survival_cat_sn = np.hstack([y_survival_cat[sn]]
                          for sn in index_shuf)
        y_grad_cat_sn = np.hstack([y_grad_cat[sn]]
                          for sn in index_shuf)
        return t1_sn, md_sn, cbv_sn, y_survival_cat_sn, y_grad_cat_sn

    t1_sn, md_sn, cbv_sn, y_survival_cat_sn, y_grad_cat_sn = shuffle_lists(Concat_Train_T1 , Concat_Train_MD, Concat_Train_CBV, train_survival_labels_cat, train_grad_labels_cat)

    t1_sn = t1_sn.reshape(len(Concat_Train_T1), 64, 64)
    md_sn = md_sn.reshape(len(Concat_Train_MD), 64, 64)
    cbv_sn = cbv_sn.reshape(len(Concat_Train_CBV), 64, 64)
    y_survival_cat_sn = y_survival_cat_sn.reshape(len(train_survival_labels_cat), 3)
    y_grad_cat_sn = y_grad_cat_sn.reshape(len(train_grad_labels_cat), 2)
    train_dataset = np.stack((t1_sn, md_sn, cbv_sn), axis=3)  # axis=0:channel first, axis=1:channel last
    ##############################################################################
    # train_dataset_concat = np.stack((Concat_Train_T1_norm, Concat_Train_MD_nrom, Concat_Train_CBV_norm))
    # train_dataset_reshape = train_dataset_concat.reshape(280, 5, 64, 64, 3)
    # train_dataset = Concat_Train_T1_norm
    # train_dataset = train_dataset.reshape(1400,64,64,1)
    # train_dataset = train_dataset[..., np.newaxis]


    #train_dataset = train_dataset.astype('float32') / 255.
    train_dataset = tf.keras.utils.normalize(train_dataset, axis=1)

    # train_dataset = np.stack((Concat_Train_T1, Concat_Train_MD, Concat_Train_CBV), axis=3)  # axis=0:channel first, axis=1:channel las

    train_grad_labels_cat = y_grad_cat_sn
    train_survival_labels_cat = y_survival_cat_sn

    # ======================================================================= validataion data
    valid_path_T1 = '/exports/lkeb-hpc/gkarami/Data/2_Validation_T1/'
    valid_path_MD = '/exports/lkeb-hpc/gkarami/Data/2_Validation_MD/'
    valid_path_CBV = '/exports/lkeb-hpc/gkarami/Data/2_Validation_CBV/'
    valid_path_mask = '/exports/lkeb-hpc/gkarami/Data/2_Validation_T1/'

    valid_dataset_T1_1 = sorted(next(os.walk(valid_path_T1))[2])
    valid_dataset_MD_1 = sorted(next(os.walk(valid_path_MD))[2])
    valid_dataset_CBV_1 = sorted(next(os.walk(valid_path_CBV))[2])

    valid_dataset_T1 = np.zeros((len(valid_dataset_T1_1), 128, 128), dtype=np.float)
    valid_dataset_MD = np.zeros((len(valid_dataset_MD_1), 128, 128), dtype=np.float)
    valid_dataset_CBV = np.zeros((len(valid_dataset_CBV_1), 128, 128), dtype=np.float)
    valid_dataset_masks = np.zeros((len(valid_dataset_T1_1), 128, 128), dtype=np.bool)

    Resized_Valid_T1 = np.zeros((len(valid_dataset_T1_1), 64, 64), dtype=np.float)
    Resized_Valid_MD = np.zeros((len(valid_dataset_MD_1), 64, 64), dtype=np.float)
    Resized_Valid_CBV = np.zeros((len(valid_dataset_CBV_1), 64, 64), dtype=np.float)
    Resized_Valid_Masks = np.zeros((len(valid_dataset_T1_1), 64, 64, 1), dtype=np.bool)
    print(valid_dataset_T1_1)
    # print(valid_dataset_MD_1)
    # print(valid_dataset_CBV_1)
    # ============= T1 valid
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(valid_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(valid_path_T1, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Valid_T1[n] = resize(cropped_image[:, :],
                                       (64, 64),
                                       mode='constant',
                                       anti_aliasing=True,
                                       preserve_range=True)

        Resized_Valid_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                       (64, 64),
                                                       mode='constant',
                                                       anti_aliasing=True,
                                                       preserve_range=True), axis=-1)

        valid_dataset_T1[n] = image

        n += 1

    Rot_90_Valid_T1= np.zeros((len(valid_dataset_T1_1), 64, 64), dtype=np.float)
    Rot_lr_Valid_T1 = np.zeros((len(valid_dataset_T1_1), 64, 64), dtype=np.float)
    Rot_ud_Valid_T1 = np.zeros((len(valid_dataset_T1_1), 64, 64), dtype=np.float)
    for m in range(len(valid_dataset_T1_1)):
        img = Resized_Valid_T1[m]
        Rot_90_Valid_T1[m] = np.rot90(img)
        Rot_lr_Valid_T1[m] = np.fliplr(img)
        Rot_ud_Valid_T1[m] = np.flipud(img)


    # # ====================================================================== for CBV  validation
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(valid_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(valid_path_CBV, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Valid_CBV[n] = resize(cropped_image[:, :],
                                           (64, 64),
                                           mode='constant',
                                           anti_aliasing=True,
                                           preserve_range=True)

        Resized_Valid_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                            (64, 64),
                                                            mode='constant',
                                                            anti_aliasing=True,
                                                            preserve_range=True), axis=-1)

        valid_dataset_CBV[n] = image
        valid_dataset_masks[n] = mask

        n += 1

    Rot_90_Valid_CBV = np.zeros((len(valid_dataset_CBV_1), 64, 64), dtype=np.float)
    Rot_lr_Valid_CBV = np.zeros((len(valid_dataset_CBV_1), 64, 64), dtype=np.float)
    Rot_ud_Valid_CBV = np.zeros((len(valid_dataset_CBV_1), 64, 64), dtype=np.float)
    for m in range(len(valid_dataset_CBV_1)):
        img = Resized_Valid_CBV[m]
        Rot_90_Valid_CBV[m] = np.rot90(img)
        Rot_lr_Valid_CBV[m] = np.fliplr(img)
        Rot_ud_Valid_CBV[m] = np.flipud(img)
    # =======================================for validation MD
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(valid_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(valid_path_MD, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Valid_MD[n] = resize(cropped_image[:, :],
                                          (64, 64),
                                          mode='constant',
                                          anti_aliasing=True,
                                          preserve_range=True)

        Resized_Valid_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                            (64, 64),
                                                            mode='constant',
                                                            anti_aliasing=True,
                                                            preserve_range=True), axis=-1)

        valid_dataset_MD[n] = image
        valid_dataset_masks[n] = mask

        n += 1


    Rot_90_Valid_MD = np.zeros((len(valid_dataset_MD_1), 64, 64), dtype=np.float)
    Rot_lr_Valid_MD = np.zeros((len(valid_dataset_MD_1), 64, 64), dtype=np.float)
    Rot_ud_Valid_MD = np.zeros((len(valid_dataset_MD_1), 64, 64), dtype=np.float)
    for m in range(len(valid_dataset_MD_1)):
        img = Resized_Valid_MD[m]
        Rot_90_Valid_MD[m] = np.rot90(img)
        Rot_lr_Valid_MD[m] = np.fliplr(img)
        Rot_ud_Valid_MD[m] = np.flipud(img)

    # ===============
    Concat_Valid_T1 = np.concatenate((Resized_Valid_T1, Rot_90_Valid_T1, Rot_lr_Valid_T1, Rot_ud_Valid_T1), axis=0)
    Concat_Valid_MD = np.concatenate((Resized_Valid_MD, Rot_90_Valid_MD, Rot_lr_Valid_MD, Rot_ud_Valid_MD), axis=0)
    Concat_Valid_CBV = np.concatenate((Resized_Valid_CBV, Rot_90_Valid_CBV, Rot_lr_Valid_CBV, Rot_ud_Valid_CBV), axis=0)

    # max_T1_valid = Concat_Valid_T1.max()
    # max_MD_valid = Concat_Valid_MD.max()
    # max_CBV_valid = Concat_Valid_CBV.max()
    #
    # Concat_Valid_T1_norm = Concat_Valid_T1.astype('float32') / max_T1_valid
    # Concat_Valid_MD_norm = Concat_Valid_MD.astype('float32') / max_MD_valid
    # Concat_Valid_CBV_norm= Concat_Valid_CBV.astype('float32') / max_CBV_valid

    valid_dataset = np.stack((Concat_Valid_T1, Concat_Valid_MD, Concat_Valid_CBV), axis=3)  # axis=0:channel first, axis=1:channel last
    # valid_dataset_reshape = valid_dataset_concat.reshape((72, 5, 64, 64, 3))
    # valid_dataset = Concat_Valid_T1_norm
    ############################################
    #valid_dataset = Concat_Valid_T1
    #valid_dataset = valid_dataset.reshape(360, 64, 64, 1)
    # valid_dataset = valid_dataset[..., np.newaxis]
    # valid_dataset = valid_dataset.reshape(72, 5, 64, 64, 3)

    #valid_dataset = valid_dataset.astype('float32') / 255.
    valid_dataset = tf.keras.utils.normalize(valid_dataset, axis=1)

    #============================ 2_test_T1
    print(valid_dataset_T1_1)
    valid_survival_labels = np.mat((
                                   " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; "
                                   " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; "
                                   " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; "
                                   " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2  "),
                               dtype=float)
    valid_grad_labels = np.mat((
                                      " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0;"
                                      " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0;"
                                      " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0;"
                                      " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0 "),
                                  dtype=float)
    # ====================2_test_copy
    # valid_survival_labels = np.mat(("1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;   0; 0; 0; 0; 0;      2; 2; 2; 2; 2; 2; 2;    0; 0; 0; 0; 0; 0; 0;    2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;   0; 0; 0; 0; 0;      2; 2; 2; 2; 2; 2; 2;    0; 0; 0; 0; 0; 0; 0;    2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;   0; 0; 0; 0; 0;      2; 2; 2; 2; 2; 2; 2;    0; 0; 0; 0; 0; 0; 0;    2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1; 1; 1; 1;   0; 0; 0; 0; 0;      2; 2; 2; 2; 2; 2; 2;    0; 0; 0; 0; 0; 0; 0;    2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;         1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1 "),
    #                                dtype=float)
    #
    # valid_grad_labels = np.mat((    "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0;   1; 1; 1; 1; 1;      1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0;   1; 1; 1; 1; 1;      1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0;   1; 1; 1; 1; 1;      1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;    0; 0; 0; 0; 0; 0; 0; 0; 0; 0;   1; 1; 1; 1; 1;      1; 1; 1; 1; 1; 1; 1;    1; 1; 1; 1; 1; 1; 1;     0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1"),
    #                            dtype=float)

    # =============================================
    # valid_survival_labels = np.mat((   " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2"), dtype=float)
    # valid_grad_labels = np.mat((" 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1"), dtype=float)

    # valid_survival_labels = np.mat(( " 1; 1; 1; 1; 1; 1; 0; 0; 0; 2; 2; 0; 0; 1; 1; 1; 1; 2;"
    #                             " 1; 1; 1; 1; 1; 1; 0; 0; 0; 2; 2; 0; 0; 1; 1; 1; 1; 2;"
    #                             " 1; 1; 1; 1; 1; 1; 0; 0; 0; 2; 2; 0; 0; 1; 1; 1; 1; 2;"
    #                             " 1; 1; 1; 1; 1; 1; 0; 0; 0; 2; 2; 0; 0; 1; 1; 1; 1; 2 "), dtype=float)
    #
    # valid_grad_labels = np.mat(("1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0;"
    #                               "1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0;"
    #                               "1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0;"
    #                               "1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0"), dtype=float)

   # ================================
   #
    # valid_survival_labels = np.mat(( "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
    #                                "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
    #                                "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
    #                                "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2"),
    #                                dtype=float)

    # valid_grad_labels = np.mat((     "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                                "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                                "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                                "0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0"),
    #                               dtype=float)

   ###########################################################
    #valid : 02(14), 19(15), 20(10), 21(10), 29(10), 43(20), 44(5)
    # valid_survival_labels = np.mat((
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2;"
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2;"
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2;"
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2"),
    #                                  dtype=float)
    # valid_grad_labels = np.mat((
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0;"
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0;"
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0;"
    #                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0"),
    #                                 dtype=float)

    valid_survival_labels_cat = (tf.keras.utils.to_categorical(valid_survival_labels))
    valid_grad_labels_cat = (tf.keras.utils.to_categorical(valid_grad_labels))

    # ========================================================================= test data
    test_path_T1 = '/exports/lkeb-hpc/gkarami/Data/2_Test_T1/'
    test_path_MD = '/exports/lkeb-hpc/gkarami/Data/2_Test_MD/'
    test_path_CBV = '/exports/lkeb-hpc/gkarami/Data/2_Test_CBV/'
    test_path_mask = '/exports/lkeb-hpc/gkarami/Data/2_Test_T1/'

    test_dataset_T1_1 = sorted(next(os.walk(test_path_T1))[2])
    test_dataset_MD_1 = sorted(next(os.walk(test_path_MD))[2])
    test_dataset_CBV_1 = sorted(next(os.walk(test_path_CBV))[2])

    test_dataset_T1 = np.zeros((len(test_dataset_T1_1), 128, 128), dtype=np.float)
    test_dataset_MD = np.zeros((len(test_dataset_MD_1), 128, 128), dtype=np.float)
    test_dataset_CBV = np.zeros((len(test_dataset_CBV_1), 128, 128), dtype=np.float)
    test_dataset_masks = np.zeros((len(test_dataset_T1_1), 128, 128), dtype=np.bool)

    Resized_Test_T1 = np.zeros((len(test_dataset_T1_1), 64, 64), dtype=np.float)
    Resized_Test_MD = np.zeros((len(test_dataset_MD_1), 64, 64), dtype=np.float)
    Resized_Test_CBV = np.zeros((len(test_dataset_CBV_1), 64, 64), dtype=np.float)
    Resized_Test_Masks = np.zeros((len(test_dataset_T1_1), 64, 64, 1), dtype=np.bool)


    # ============T1 test
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(test_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(test_path_T1, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Test_T1[n] = resize(cropped_image[:, :],
                                 (64, 64),
                                 mode='constant',
                                 anti_aliasing=True,
                                 preserve_range=True)

        Resized_Test_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                      (64, 64),
                                                      mode='constant',
                                                      anti_aliasing=True,
                                                      preserve_range=True), axis=-1)

        test_dataset_T1[n] = image
        test_dataset_masks[n] = mask
        n += 1

    Rot_90_Test_T1 = np.zeros((len(test_dataset_T1_1), 64, 64), dtype=np.float)
    Rot_lr_Test_T1 = np.zeros((len(test_dataset_T1_1), 64, 64), dtype=np.float)
    Rot_ud_Test_T1 = np.zeros((len(test_dataset_T1_1), 64, 64), dtype=np.float)
    for m in range(len(test_dataset_T1_1)):
        img = Resized_Test_T1[m]
        Rot_90_Test_T1[m] = np.rot90(img)
        Rot_lr_Test_T1[m] = np.fliplr(img)
        Rot_ud_Test_T1[m] = np.flipud(img)

    # ============================================================ for  CBV  Test
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(test_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(test_path_CBV, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Test_CBV[n] = resize(cropped_image[:, :],
                                     (64, 64),
                                     mode='constant',
                                     anti_aliasing=True,
                                     preserve_range=True)

        Resized_Test_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                      (64, 64),
                                                      mode='constant',
                                                      anti_aliasing=True,
                                                      preserve_range=True), axis=-1)

        test_dataset_CBV[n] = image
        n += 1


    Rot_90_Test_CBV = np.zeros((len(test_dataset_CBV_1), 64, 64), dtype=np.float)
    Rot_lr_Test_CBV = np.zeros((len(test_dataset_CBV_1), 64, 64), dtype=np.float)
    Rot_ud_Test_CBV = np.zeros((len(test_dataset_CBV_1), 64, 64), dtype=np.float)
    for m in range(len(test_dataset_CBV_1)):
        img = Resized_Test_CBV[m]
        Rot_90_Test_CBV[m] = np.rot90(img)
        Rot_lr_Test_CBV[m] = np.fliplr(img)
        Rot_ud_Test_CBV[m] = np.flipud(img)

    # # # =========================================================for MD Test
    n = 0
    for mask_path in glob.glob('{}/*.tif'.format(test_path_mask)):
        base = os.path.basename(mask_path)
        image_ID, ext = os.path.splitext(base)
        image_path = '{}/{}.tif'.format(test_path_MD, image_ID)
        mask = imread(mask_path)
        image = imread(image_path)

        y_coord, x_coord = np.where(mask != 0)

        y_min = min(y_coord)
        y_max = max(y_coord)
        x_min = min(x_coord)
        x_max = max(x_coord)

        cropped_image = image[y_min:y_max, x_min:x_max]
        cropped_mask = mask[y_min:y_max, x_min:x_max]

        Resized_Test_MD[n] = resize(cropped_image[:, :],
                                    (64, 64),
                                    mode='constant',
                                    anti_aliasing=True,
                                    preserve_range=True)

        Resized_Test_Masks[n] = np.expand_dims(resize(cropped_mask,
                                                      (64, 64),
                                                      mode='constant',
                                                      anti_aliasing=True,
                                                      preserve_range=True), axis=-1)

        test_dataset_MD[n] = image
        n += 1

    Rot_90_Test_MD = np.zeros((len(test_dataset_MD_1), 64, 64), dtype=np.float)
    Rot_lr_Test_MD = np.zeros((len(test_dataset_MD_1), 64, 64), dtype=np.float)
    Rot_ud_Test_MD = np.zeros((len(test_dataset_MD_1), 64, 64), dtype=np.float)
    for m in range(len(test_dataset_MD_1)):
        img = Resized_Test_MD[m]
        Rot_90_Test_MD[m] = np.rot90(img)
        Rot_lr_Test_MD[m] = np.fliplr(img)
        Rot_ud_Test_MD[m] = np.flipud(img)
    # ============================

    Concat_Test_T1 = np.concatenate((Resized_Test_T1, Rot_90_Test_T1, Rot_lr_Test_T1, Rot_ud_Test_T1), axis=0)
    Concat_Test_MD = np.concatenate((Resized_Test_MD, Rot_90_Test_MD, Rot_lr_Test_MD, Rot_ud_Test_MD), axis=0)
    Concat_Test_CBV = np.concatenate((Resized_Test_CBV, Rot_90_Test_CBV, Rot_lr_Test_CBV, Rot_ud_Test_CBV), axis=0)

    # max_T1_test= Concat_Test_T1.max()
    # max_MD_test = Concat_Test_MD.max()
    # max_CBV_test = Concat_Test_CBV.max()
    #
    #
    # Concat_Test_T1_norm = Concat_Test_T1.astype('float32') / max_T1_test
    # Concat_Test_MD_norm = Concat_Test_MD.astype('float32') / max_MD_test
    # Concat_Test_CBV_norm = Concat_Test_CBV.astype('float32') / max_CBV_test


    test_dataset = np.stack((Concat_Test_T1, Concat_Test_MD, Concat_Test_CBV), axis=3)  # axis=0:channel first, axis=1:channel last
    # test_dataset_reshape = test_dataset_concat.reshape(80, 5, 64, 64, 3)
    # test_dataset = Concat_Test_T1_norm


    # test_dataset = test_dataset[..., np.newaxis]
    # test_dataset = test_dataset.reshape(80, 5, 64, 64, 3)

    # test_dataset = test_dataset.astype('float32') / 255.
    test_dataset = tf.keras.utils.normalize(test_dataset, axis=1)
    print(test_dataset_T1_1)
#     print(test_dataset_MD_1)
#     print(test_dataset_CBV_1)
# #===================================
#
    test_survival_labels = np.mat((
                                  "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
                                  "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
                                 "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;"
                                  "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2"),
                              dtype=float)
    test_grad_labels = np.mat((
                                 " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
                                 " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
                                 " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
                                 " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0"),
                                 dtype=float)


# ============================ 2 copy
#     test_survival_labels = np.mat((
#         "1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2;"
#         "1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; "
#         "1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; "
#         "1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2"),
#         dtype=float)
#     test_grad_labels = np.mat((
#         " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; "
#         " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1;"
#         " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; "
#         " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;        1; 1; 1; 1; 1; 1; 1; 1;       0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1"),
#         dtype=float)
#     #=================================================
    # test_survival_labels = np.mat((   " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2"), dtype=float)
    # test_grad_labels = np.mat((" 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0"), dtype=float)

    # test_survival_labels1 = np.mat(( "1; 1; 1; 2; 2; 2; 0; 0; 0; 0; 0; 0; 1; 1; 2; 2; 1; 1; 2; 2;"
    #                             "1; 1; 1; 2; 2; 2; 0; 0; 0; 0; 0; 0; 1; 1; 2; 2; 1; 1; 2; 2;"
    #                             "1; 1; 1; 2; 2; 2; 0; 0; 0; 0; 0; 0; 1; 1; 2; 2; 1; 1; 2; 2;"
    #                             "1; 1; 1; 2; 2; 2; 0; 0; 0; 0; 0; 0; 1; 1; 2; 2; 1; 1; 2; 2"), dtype=float)
    #
    # test_grad_labels1 = np.mat(( " 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0;"
    #                                " 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0;"
    #                                " 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0;"
    #                                " 1; 1; 1; 0; 0; 0; 1; 1; 1; 1; 1; 1; 0; 0; 1; 1; 1; 1; 0; 0"), dtype=float)


# ==========================  Data/2_Train_hg
    # test_survival_labels = np.mat(( " 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
    #                                " 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
    #                                " 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
    #                                " 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2"),
    #                              dtype=float)

    # test_grad_labels = np.mat((     " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                               " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;"
    #                                " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; "
    #                               " 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0"),
    #                             dtype=float)
# # ======#########################################
    # Test: 03(17), 05(15), 11(15), 16(13), 32(10), 46(15)
    #
#     test_survival_labels = np.mat((
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; "
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;     1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2"),
#                                   dtype=float)
#     test_grad_labels = np.mat((
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; "
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;"
#                                     "1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;         0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;        1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1;      0; 0; 0; 0; 0; 0; 0; 0; 0; 0;       1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1"),
#
#                                     dtype=float)
#
# ###########################################

    test_survival_labels_cat = (tf.keras.utils.to_categorical(test_survival_labels))
    test_grad_labels_cat = (tf.keras.utils.to_categorical(test_grad_labels))
    # ===============================================
    logno = 1
    hight = 64
    channel = 3
    # volume = 5
    batch_size = 128
    learn_rate = 0.001
    n_output_survival = 3
    n_output_grad = 2
    total_size = train_dataset.shape[0]

    net = Network(
        n_output_grad = n_output_grad,
        n_output_survival = n_output_survival,
        n_length=hight,
        # n_volume = volume,
        learning_rate=learn_rate,
        batch_size=batch_size,
        channel=channel,
        output_graph=True,
        use_ckpt=False,
        logno=logno
    )
    epoch = 12000

    iteration = int(total_size / batch_size)

    early_stop = 0 #flag of early stopping
    i=1 # total training time
    accu_train_grad=[]
    accu_valid_grad=[]
    accu_test_grad=[]
    accu_train_survival = []
    accu_valid_survival = []
    accu_test_survival = []
    loss_train=[]#########################
    loss_valid=[]#################
    loss_test=[]#########
    pre_loss_vl=0
    pre_loss_tr=0
    pre_loss_ts=0
    train_rate_grad,train_rate_survival = 0,0
    valid_rate_grad, valid_rate_survival = 0, 0 ###################################################
    point=0
    for e in range(epoch):
        print("-------------------------------")
        print("epoch %d" %(e+1))
        # randomly sample batch memory from all memory
        indices = np.random.permutation(total_size)
        for ite in range(iteration):
            point=point+1
            mini_indices = indices[ite*batch_size:(ite+1)*batch_size]
            batch_x = train_dataset[mini_indices, :, :, :]
            # batch_v = valid_dataset[mini_indices, :, :, :] ######################################
            batch_y_grad = train_grad_labels_cat[mini_indices, :]
            batch_y_survival = train_survival_labels_cat[mini_indices, :]
            net.learn(batch_x,batch_y_grad,batch_y_survival,point)
            # net.validation(batch_v,batch_y_grad,batch_y_survival) #####################################

            if i%5==0:
                cost,train_rate_grad,train_rate_survival = net.get_accuracy_rate(batch_x,batch_y_grad,batch_y_survival,flag=1,point=point,pre_loss=pre_loss_tr)
                pre_loss_tr=cost
                print("Iteration: %i. Train loss %.5f, Minibatch grad accuracy:"" %.1f%%,Minibatch survival accuracy:"" %.1f%%"
                      % (i, cost, train_rate_grad,train_rate_survival))
                accu_train_grad.append(train_rate_grad),accu_train_survival.append(train_rate_survival), loss_train.append(cost)


                cost, valid_rate_grad,valid_rate_survival = net.get_accuracy_rate(valid_dataset,valid_grad_labels_cat,valid_survival_labels_cat,flag=2,point=point,pre_loss=pre_loss_vl)
                pre_loss_vl=cost
                print("Iteration: %i. Validation loss %.5f, Validation grad accuracy:" " %.1f%% ,Validation survival accuracy:" " %.1f%%"
                      % (i, cost, valid_rate_grad,valid_rate_survival))
                accu_valid_grad.append(valid_rate_grad), accu_valid_survival.append(valid_rate_survival), loss_valid.append(cost)

                cost, test_rate_grad,test_rate_survival = net.get_accuracy_rate(test_dataset, test_grad_labels_cat,test_survival_labels_cat,pre_loss=pre_loss_ts)
                pre_loss_ts=cost
                print("Iteration: %i. Test loss %.5f, Test grad accuracy:"" %.1f%%,Test survival accuracy:"" %.1f%%"
                      % (i, cost, test_rate_grad,test_rate_survival))
                accu_test_grad.append(test_rate_grad), accu_test_survival.append(test_rate_survival), loss_test.append(cost)
            if i%50==0:
                net.save_parameters()

            if i%5==0: # save histogram
                net.merge_hist(batch_x,batch_y_grad,batch_y_survival,point)
            i = i+1

        # early stopping
        # if train_rate_grad==100 and train_rate_survival==100:
        #     if early_stop==10:
        #         print("Early Stopping!")
        #         break
        #     else:early_stop = early_stop+1

    # net.plot_cost() # plot trainingi cost


    plt.figure()  # plot loss
    plt.plot(np.arange(len(loss_train)), loss_train, label='train', linestyle='--')
    plt.plot(np.arange(len(loss_valid)), loss_valid, label='valid', linestyle='-')
    plt.plot(np.arange(len(loss_test)), loss_test, label='test', linestyle=':')
    plt.ylabel('loss_ dataNorma')
    plt.xlabel('epoch')
    plt.legend(loc='lower right')
    plt.grid()
    plt.savefig("/exports/lkeb-hpc/gkarami/Code/Jobs/"+str(logno)+"_loss_jointly.png")
    # plt.show()

    plt.figure()   # plot accuracy
    plt.plot(np.arange(len(accu_train_grad)), accu_train_grad,label='train grad',linestyle='--' )
    plt.plot(np.arange(len(accu_valid_grad)), accu_valid_grad,label='valid grad',linestyle='-')
    plt.plot(np.arange(len(accu_test_grad)), accu_test_grad,label='test grad',linestyle=':')
    plt.ylabel('grad accuracy')
    plt.xlabel('epoch')
    plt.legend(loc='lower right')
    plt.grid()
    plt.savefig("/exports/lkeb-hpc/gkarami/Code/Jobs/"+str(logno)+"_accuracy_jointly_grad.png")
    # plt.show()

    plt.figure()  # plot accuracy
    plt.plot(np.arange(len(accu_train_survival)), accu_train_survival,label='train survival',linestyle='--')
    plt.plot(np.arange(len(accu_valid_survival)), accu_valid_survival,label='valid survival',linestyle='-')
    plt.plot(np.arange(len(accu_test_survival)), accu_test_survival,label='test survival',linestyle=':')
    plt.ylabel('survival accuracy')
    plt.xlabel('epoch')
    plt.legend(loc='lower right')
    plt.grid()
    plt.savefig("/exports/lkeb-hpc/gkarami/Code/Jobs/"+str(logno)+"_accuracy_jointly_survival.png")
    # plt.show()
    # ==========================================


def main():
    train_model()

if __name__=='__main__':
    main()